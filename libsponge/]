#include "tcp_sender.hh"

#include "tcp_config.hh"

#include <random>
#include <iostream>
using namespace std;

void Timer::start(unsigned int timeout) {
    _active = true;
    _current_time = 0;
    _timeout = timeout;
}

void Timer::update(unsigned int time_elapsed) {
    if (!_active) {
        throw runtime_error("Trying to update an inactive timer. Please start it first.");
    }
    _current_time += time_elapsed;
    if (_current_time >= _timeout) _expired = true;
}

void Timer::reset() {
    _active = false;
    _expired = false;
    _timeout = 0;
    _current_time = 0;
}

//! \param[in] capacity the capacity of the outgoing byte stream
//! \param[in] retx_timeout the initial amount of time to wait before retransmitting the oldest outstanding segment
//! \param[in] fixed_isn the Initial Sequence Number to use, if set (otherwise uses a random ISN)
TCPSender::TCPSender(const size_t capacity, const uint16_t retx_timeout, const std::optional<WrappingInt32> fixed_isn)
    : _isn(fixed_isn.value_or(WrappingInt32{random_device()()}))
    , _initial_retransmission_timeout{retx_timeout}
    , _retrans_timeout(retx_timeout)
    , _stream(capacity) {}

uint64_t TCPSender::bytes_in_flight() const { 
    uint64_t res = 0;
    for (auto& seg : _retrans_buf)
    {
        res += seg.length_in_sequence_space();
    }
    return res;
}

void TCPSender::fill_window() {
    size_t remaining_winsize = (_window_size != 0 ? _window_size : 1);
    while (true)
    {
        uint16_t seg_size = min(remaining_winsize, TCPConfig::MAX_PAYLOAD_SIZE);
        string seg_data = _stream.read(seg_size);
        // actual segment size
        seg_size = seg_data.size();
        
        // not initial and no more thing to read from _stream
        if (_next_seqno != 0 && seg_size == 0) {
            break;
        }
        TCPSegment seg;
        // set the header
        TCPHeader& header = seg.header();
        if (_next_seqno == 0) {
            header.syn = true;
        }
        if (_stream.eof()) {
            header.fin = true;
        }
        header.seqno = wrap(_next_seqno, _isn);
        // set the data
        seg.parse(Buffer(move(seg_data)));
        
        if (!header.syn && !header.fin && seg_size == 0) {
            break;
        }

        _segments_out.push(seg);
        _retrans_buf.emplace_back(seg);
        _next_seqno += seg.length_in_sequence_space();
        remaining_winsize -= seg_size;

        if (!_timer.active())
        {
            _timer.start(_retrans_timeout);
        }
    }
}

//! \param ackno The remote receiver's ackno (acknowledgment number)
//! \param window_size The remote receiver's advertised window size
void TCPSender::ack_received(const WrappingInt32 ackno, const uint16_t window_size) {
    _window_size = window_size;
    // use last seqno as checkpoint
    uint64_t new_seqno = unwrap(ackno, _isn, _next_seqno);
    
    // remove ack-ed segments from the retransmission buffer
    for (auto it = _retrans_buf.begin(); it != _retrans_buf.end(); )
    {
        if ((*it).header().seqno.raw_value() < ackno.raw_value()) {
            it = _retrans_buf.erase(it);
            //cout << "remove temp" << endl;
        }
        else ++it;
    }
    // possibly refill the window
    fill_window();

    if (new_seqno > _next_seqno) {
        _retrans_timeout = _initial_retransmission_timeout;
        _timer.start(_retrans_timeout);
        _consec_retrans_count = 0;
        _next_seqno = new_seqno;
    }
    //cout << "next seqno " << _next_seqno << " bytes flight " << bytes_in_flight() << endl;
    // stop the timer if retransmission buffer is clear
    if (_retrans_buf.empty()) _timer.reset();
}

//! \param[in] ms_since_last_tick the number of milliseconds since the last call to this method
void TCPSender::tick(const size_t ms_since_last_tick) {
    //cout << "param " << ms_since_last_tick << endl;
    if (!_timer.active()) return;
    //cout << "survive" << endl;
    _timer.update(ms_since_last_tick);
    if (true || _timer.expired())
    {
        TCPSegment seg = _retrans_buf.front();
        _segments_out.push(seg);

        if (_window_size > 0) {
            _consec_retrans_count++;
            _retrans_timeout *= 2;
        }
        _timer.start(_retrans_timeout);
    }
}

unsigned int TCPSender::consecutive_retransmissions() const { return _consec_retrans_count; }

void TCPSender::send_empty_segment() {
    _segments_out.emplace(TCPSegment());
}
